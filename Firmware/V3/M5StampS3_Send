/*

ESP-NOW Grain Transmitter Example

This sketch is used to send information for vibrotactile feedback wirelessly from a PC to an ESP board.
The information is sent using serial to an ESP plugged in to the PC, which then transmits it via ESP-NOW to one or more other ESPs.

To use this sketch:
1. Set STREAM_SERIAL to True in qtm_config.py
2. Make sure the baud rate in qtm_config.py matches the one set here
3. Change the value of NB_RECEIVERS to the number of receivers you want to send data to
3. Put the MAC addresses of all receivers in receiverAddress - the example receiver code prints the MAC address in the Serial Monitor

*/

#include <esp_now.h>
#include "esp_wifi.h"
#include <WiFi.h>

#define BAUD_RATE 921600
#define NB_RECEIVERS 2

// 0x64, 0xE8, 0x33, 0x4B, 0x68, 0x90}, {0x98, 0x3D, 0xAE, 0xED, 0xEB, 0xEC}
// 24:A1:60:3A:B8:9D
uint8_t receiverAddress[NB_RECEIVERS][6] = {{0x48, 0xCA, 0x43, 0xB7, 0x83, 0x00},{0x64, 0xE8, 0x33, 0x4B, 0x68, 0x90}};

esp_now_peer_info_t peerInfo[NB_RECEIVERS];

typedef struct VibeData
{
    uint8_t id;           // ID of the receiver - this sketch broadcasts the received data to all receivers
    uint16_t frequency;   // Frequency of the vibration in Hz
    uint32_t duration_us; // Duration of the vibration in microseconds - set to a value greater than 0 for a grain, set to 0 to start/stop vibration
    float amplitude;      // Amplitude of the vibration - between 0.0 and 1.0
} VibeData;

VibeData vibeData;

void setup()
{
    Serial.begin(BAUD_RATE);
    delay(1000);
    Serial.println("Encore du travail, TOUJOURS DU TRAVAIL ...");
    WiFi.mode(WIFI_STA);
    esp_wifi_set_ps(WIFI_PS_NONE); // disable power saving mode - very important for latency
    esp_wifi_set_max_tx_power(84); 
    esp_now_init();
    for (int i = 0; i < NB_RECEIVERS; i++)
    {
        memcpy(peerInfo[i].peer_addr, receiverAddress[i], 6);
        peerInfo[i].channel = 0;
        peerInfo[i].encrypt = false;
        if (esp_now_add_peer(&peerInfo[i]) != ESP_OK)
        {
            Serial.println("Failed to add peer");
            return;
        }
    }
}

void loop()
{
    if (Serial.available() > 0)
    {
        String receivedData = Serial.readStringUntil('\n');
        int itemsParsed = sscanf(receivedData.c_str(), "%hhu,%hu,%lu,%f", &vibeData.id, &vibeData.frequency, &vibeData.duration_us, &vibeData.amplitude);
        if (itemsParsed == 4)
        {
            esp_now_send(NULL, (uint8_t *)&vibeData, sizeof(vibeData));
            // Serial.printf("Sent data to ID: %d, Frequency: %hu Hz, Duration: %lu us, Amplitude: %.2f\n", vibeData.id, vibeData.frequency, vibeData.duration_us, vibeData.amplitude);
        }
        // else
        // {
        //     Serial.println("Parsing error, data received:");
        //     Serial.println(receivedData);
        // }
    }
}
